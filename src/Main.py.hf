import fitz
from transformers import T5Tokenizer, T5ForConditionalGeneration

def extract_text_from_pdf(pdf_path, page_number):
    """Extract text from a specified page of a PDF."""
    doc = fitz.open(pdf_path)

    if page_number < 1 or page_number > len(doc):
        raise ValueError(f"Page number {page_number} is out of range. The document has {len(doc)} pages.")

    page = doc[page_number - 1]
    text = page.get_text("text")
    return text.strip()

def summarize_text_with_flan_t5(text, model_name="google/flan-t5-large"):
    """Summarize the text using the FLAN-T5 model for a detailed explanation."""
    if not text:
        return "No text found on the page."

    tokenizer = T5Tokenizer.from_pretrained(model_name, legacy=False)
    model = T5ForConditionalGeneration.from_pretrained(model_name)

    # Modify prompt to encourage more detailed output
    prompt = (
        "Explain the following content as if you are a school teacher "
        "teaching a classroom of young students. Use simple language, provide examples, "
        "and break down complex ideas into easy-to-understand parts.\n\n"
        f"Text:\n{text}\n\n"
        "Your Explanation:"
    )

    inputs = tokenizer(prompt, return_tensors="pt", max_length=1024, truncation=False)

    # Adjust generation parameters
    outputs = model.generate(
        **inputs,
        max_length=2048,  # Increased for detailed output
        do_sample=True,
        temperature=0.9,  # Higher temperature for more creativity
        top_p=0.95,       # Sampling from more probable words
        repetition_penalty=1.2,  # Reduce repetition
        num_return_sequences=10  # Return one high-quality response
    )

    explanation = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return explanation

# Example usage
pdf_path = "../resources/SSO Integration.pdf"
page_number = 6

try:
    text = extract_text_from_pdf(pdf_path, page_number)
    explanation = summarize_text_with_flan_t5(text)
    print(f"Explanation for Page {page_number}:\n{explanation}")
except Exception as e:
    print(f"Error: {e}")
